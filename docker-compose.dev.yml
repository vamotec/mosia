services:
  # PostgreSQL Database
  postgres:
    image: postgres:17
    container_name: mosia-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-mosia_dev}
      POSTGRES_USER: ${POSTGRES_USER:-mosia}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-ttr851217}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/main_service/moscala/src/main/resources/db/migration:/docker-entrypoint-initdb.d
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-mosia} -d ${POSTGRES_DB:-mosia_dev}",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mosia-network

  # Redis Cache
  redis:
    image: redis:latest
    container_name: mosia-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mosia-network

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: mosia-zookeeper
    ports:
      - "${ZOOKEEPER_PORT:-2181}:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    networks:
      - mosia-network

  # Apache Kafka
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: mosia-kafka
    depends_on:
      - zookeeper
    ports:
      - "${KAFKA_PORT:-9092}:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_LOG_RETENTION_HOURS: 168
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test:
        ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mosia-network

  # Mosia Scala API Service
  api:
    build:
      context: ./backend/main_service/moscala
      dockerfile: Dockerfile
    container_name: mosia-api
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "${API_PORT:-3010}:3010"
      - "${GRPC_PORT:-9090}:9090"
    environment:
      # 从.env文件读取，支持默认值
      ENVIRONMENT: ${ENVIRONMENT:-development}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}

      # Database configuration
      DB_DEFAULT_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB:-mosia_dev}
      DB_DEFAULT_USER: ${POSTGRES_USER:-mosia}
      DB_DEFAULT_PASSWORD: ${POSTGRES_PASSWORD:-ttr851217}

      # Kafka configuration
      KAFKA_BOOTSTRAP_SERVER: kafka:9092

      # Security configuration
      JWT_SECRET: ${JWT_SECRET:-default_jwt_secret_change_in_production}
      CRYPTO_SECRET: ${CRYPTO_SECRET:-default_crypto_secret_change_in_production}

      # SMTP configuration (optional for development)
      SMTP_HOST: ${SMTP_HOST:-smtp.qq.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USERNAME: ${SMTP_USERNAME:-237752182@qq.com}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-development_smtp_password}
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3010/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mosia-network

volumes:
  postgres_data:
  redis_data:
  kafka_data:
  zookeeper_data:

networks:
  mosia-network:
    driver: bridge
