# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import financial_agents_pb2 as financial__agents__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in financial_agents_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class FinancialAgentsServiceStub(object):
    """金融AI Agents主服务
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AnalyzeFundamentals = channel.unary_unary(
                '/financial_agents.FinancialAgentsService/AnalyzeFundamentals',
                request_serializer=financial__agents__pb2.FundamentalAnalysisRequest.SerializeToString,
                response_deserializer=financial__agents__pb2.FundamentalAnalysisResponse.FromString,
                _registered_method=True)
        self.AnalyzeTechnical = channel.unary_unary(
                '/financial_agents.FinancialAgentsService/AnalyzeTechnical',
                request_serializer=financial__agents__pb2.TechnicalAnalysisRequest.SerializeToString,
                response_deserializer=financial__agents__pb2.TechnicalAnalysisResponse.FromString,
                _registered_method=True)
        self.AnalyzeRisk = channel.unary_unary(
                '/financial_agents.FinancialAgentsService/AnalyzeRisk',
                request_serializer=financial__agents__pb2.RiskAnalysisRequest.SerializeToString,
                response_deserializer=financial__agents__pb2.RiskAnalysisResponse.FromString,
                _registered_method=True)
        self.AnalyzeSentiment = channel.unary_unary(
                '/financial_agents.FinancialAgentsService/AnalyzeSentiment',
                request_serializer=financial__agents__pb2.FinancialSentimentRequest.SerializeToString,
                response_deserializer=financial__agents__pb2.FinancialSentimentResponse.FromString,
                _registered_method=True)
        self.AnalyzeMacro = channel.unary_unary(
                '/financial_agents.FinancialAgentsService/AnalyzeMacro',
                request_serializer=financial__agents__pb2.MacroAnalysisRequest.SerializeToString,
                response_deserializer=financial__agents__pb2.MacroAnalysisResponse.FromString,
                _registered_method=True)
        self.GetTradeAdvice = channel.unary_unary(
                '/financial_agents.FinancialAgentsService/GetTradeAdvice',
                request_serializer=financial__agents__pb2.TradeAdviceRequest.SerializeToString,
                response_deserializer=financial__agents__pb2.TradeAdviceResponse.FromString,
                _registered_method=True)
        self.GetInvestmentAdvice = channel.unary_unary(
                '/financial_agents.FinancialAgentsService/GetInvestmentAdvice',
                request_serializer=financial__agents__pb2.InvestmentAdviceRequest.SerializeToString,
                response_deserializer=financial__agents__pb2.InvestmentAdviceResponse.FromString,
                _registered_method=True)
        self.ProcessInvestmentChat = channel.unary_unary(
                '/financial_agents.FinancialAgentsService/ProcessInvestmentChat',
                request_serializer=financial__agents__pb2.InvestmentChatRequest.SerializeToString,
                response_deserializer=financial__agents__pb2.InvestmentChatResponse.FromString,
                _registered_method=True)
        self.GetRealTimeRecommendations = channel.unary_stream(
                '/financial_agents.FinancialAgentsService/GetRealTimeRecommendations',
                request_serializer=financial__agents__pb2.RealtimeRecommendationRequest.SerializeToString,
                response_deserializer=financial__agents__pb2.RecommendationUpdate.FromString,
                _registered_method=True)
        self.AnalyzePortfolio = channel.unary_unary(
                '/financial_agents.FinancialAgentsService/AnalyzePortfolio',
                request_serializer=financial__agents__pb2.PortfolioAnalysisRequest.SerializeToString,
                response_deserializer=financial__agents__pb2.PortfolioAnalysisResponse.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/financial_agents.FinancialAgentsService/HealthCheck',
                request_serializer=financial__agents__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=financial__agents__pb2.HealthCheckResponse.FromString,
                _registered_method=True)


class FinancialAgentsServiceServicer(object):
    """金融AI Agents主服务
    """

    def AnalyzeFundamentals(self, request, context):
        """基本面分析
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AnalyzeTechnical(self, request, context):
        """技术分析
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AnalyzeRisk(self, request, context):
        """风险分析
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AnalyzeSentiment(self, request, context):
        """情绪分析
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AnalyzeMacro(self, request, context):
        """宏观分析
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTradeAdvice(self, request, context):
        """交易助理
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetInvestmentAdvice(self, request, context):
        """综合投资建议
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessInvestmentChat(self, request, context):
        """个性化聊天
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRealTimeRecommendations(self, request, context):
        """实时推荐流
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AnalyzePortfolio(self, request, context):
        """投资组合分析
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """健康检查
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FinancialAgentsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AnalyzeFundamentals': grpc.unary_unary_rpc_method_handler(
                    servicer.AnalyzeFundamentals,
                    request_deserializer=financial__agents__pb2.FundamentalAnalysisRequest.FromString,
                    response_serializer=financial__agents__pb2.FundamentalAnalysisResponse.SerializeToString,
            ),
            'AnalyzeTechnical': grpc.unary_unary_rpc_method_handler(
                    servicer.AnalyzeTechnical,
                    request_deserializer=financial__agents__pb2.TechnicalAnalysisRequest.FromString,
                    response_serializer=financial__agents__pb2.TechnicalAnalysisResponse.SerializeToString,
            ),
            'AnalyzeRisk': grpc.unary_unary_rpc_method_handler(
                    servicer.AnalyzeRisk,
                    request_deserializer=financial__agents__pb2.RiskAnalysisRequest.FromString,
                    response_serializer=financial__agents__pb2.RiskAnalysisResponse.SerializeToString,
            ),
            'AnalyzeSentiment': grpc.unary_unary_rpc_method_handler(
                    servicer.AnalyzeSentiment,
                    request_deserializer=financial__agents__pb2.FinancialSentimentRequest.FromString,
                    response_serializer=financial__agents__pb2.FinancialSentimentResponse.SerializeToString,
            ),
            'AnalyzeMacro': grpc.unary_unary_rpc_method_handler(
                    servicer.AnalyzeMacro,
                    request_deserializer=financial__agents__pb2.MacroAnalysisRequest.FromString,
                    response_serializer=financial__agents__pb2.MacroAnalysisResponse.SerializeToString,
            ),
            'GetTradeAdvice': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTradeAdvice,
                    request_deserializer=financial__agents__pb2.TradeAdviceRequest.FromString,
                    response_serializer=financial__agents__pb2.TradeAdviceResponse.SerializeToString,
            ),
            'GetInvestmentAdvice': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInvestmentAdvice,
                    request_deserializer=financial__agents__pb2.InvestmentAdviceRequest.FromString,
                    response_serializer=financial__agents__pb2.InvestmentAdviceResponse.SerializeToString,
            ),
            'ProcessInvestmentChat': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessInvestmentChat,
                    request_deserializer=financial__agents__pb2.InvestmentChatRequest.FromString,
                    response_serializer=financial__agents__pb2.InvestmentChatResponse.SerializeToString,
            ),
            'GetRealTimeRecommendations': grpc.unary_stream_rpc_method_handler(
                    servicer.GetRealTimeRecommendations,
                    request_deserializer=financial__agents__pb2.RealtimeRecommendationRequest.FromString,
                    response_serializer=financial__agents__pb2.RecommendationUpdate.SerializeToString,
            ),
            'AnalyzePortfolio': grpc.unary_unary_rpc_method_handler(
                    servicer.AnalyzePortfolio,
                    request_deserializer=financial__agents__pb2.PortfolioAnalysisRequest.FromString,
                    response_serializer=financial__agents__pb2.PortfolioAnalysisResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=financial__agents__pb2.HealthCheckRequest.FromString,
                    response_serializer=financial__agents__pb2.HealthCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'financial_agents.FinancialAgentsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('financial_agents.FinancialAgentsService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class FinancialAgentsService(object):
    """金融AI Agents主服务
    """

    @staticmethod
    def AnalyzeFundamentals(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/financial_agents.FinancialAgentsService/AnalyzeFundamentals',
            financial__agents__pb2.FundamentalAnalysisRequest.SerializeToString,
            financial__agents__pb2.FundamentalAnalysisResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AnalyzeTechnical(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/financial_agents.FinancialAgentsService/AnalyzeTechnical',
            financial__agents__pb2.TechnicalAnalysisRequest.SerializeToString,
            financial__agents__pb2.TechnicalAnalysisResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AnalyzeRisk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/financial_agents.FinancialAgentsService/AnalyzeRisk',
            financial__agents__pb2.RiskAnalysisRequest.SerializeToString,
            financial__agents__pb2.RiskAnalysisResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AnalyzeSentiment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/financial_agents.FinancialAgentsService/AnalyzeSentiment',
            financial__agents__pb2.FinancialSentimentRequest.SerializeToString,
            financial__agents__pb2.FinancialSentimentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AnalyzeMacro(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/financial_agents.FinancialAgentsService/AnalyzeMacro',
            financial__agents__pb2.MacroAnalysisRequest.SerializeToString,
            financial__agents__pb2.MacroAnalysisResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTradeAdvice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/financial_agents.FinancialAgentsService/GetTradeAdvice',
            financial__agents__pb2.TradeAdviceRequest.SerializeToString,
            financial__agents__pb2.TradeAdviceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetInvestmentAdvice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/financial_agents.FinancialAgentsService/GetInvestmentAdvice',
            financial__agents__pb2.InvestmentAdviceRequest.SerializeToString,
            financial__agents__pb2.InvestmentAdviceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ProcessInvestmentChat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/financial_agents.FinancialAgentsService/ProcessInvestmentChat',
            financial__agents__pb2.InvestmentChatRequest.SerializeToString,
            financial__agents__pb2.InvestmentChatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRealTimeRecommendations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/financial_agents.FinancialAgentsService/GetRealTimeRecommendations',
            financial__agents__pb2.RealtimeRecommendationRequest.SerializeToString,
            financial__agents__pb2.RecommendationUpdate.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AnalyzePortfolio(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/financial_agents.FinancialAgentsService/AnalyzePortfolio',
            financial__agents__pb2.PortfolioAnalysisRequest.SerializeToString,
            financial__agents__pb2.PortfolioAnalysisResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/financial_agents.FinancialAgentsService/HealthCheck',
            financial__agents__pb2.HealthCheckRequest.SerializeToString,
            financial__agents__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
