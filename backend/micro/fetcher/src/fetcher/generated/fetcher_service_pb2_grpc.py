# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import fetcher_service_pb2 as fetcher__service__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in fetcher_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class FetcherServiceStub(object):
    """Main Fetcher Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.FetchExternalData = channel.unary_unary(
                '/fetcher.FetcherService/FetchExternalData',
                request_serializer=fetcher__service__pb2.FetchRequest.SerializeToString,
                response_deserializer=fetcher__service__pb2.FetchResponse.FromString,
                _registered_method=True)
        self.FetchBulkData = channel.unary_stream(
                '/fetcher.FetcherService/FetchBulkData',
                request_serializer=fetcher__service__pb2.BulkFetchRequest.SerializeToString,
                response_deserializer=fetcher__service__pb2.FetchResponse.FromString,
                _registered_method=True)
        self.ScheduleFetch = channel.unary_unary(
                '/fetcher.FetcherService/ScheduleFetch',
                request_serializer=fetcher__service__pb2.ScheduleFetchRequest.SerializeToString,
                response_deserializer=fetcher__service__pb2.ScheduleFetchResponse.FromString,
                _registered_method=True)
        self.ProcessData = channel.unary_unary(
                '/fetcher.FetcherService/ProcessData',
                request_serializer=fetcher__service__pb2.ProcessingRequest.SerializeToString,
                response_deserializer=fetcher__service__pb2.ProcessingResponse.FromString,
                _registered_method=True)
        self.ValidateData = channel.unary_unary(
                '/fetcher.FetcherService/ValidateData',
                request_serializer=fetcher__service__pb2.ValidationRequest.SerializeToString,
                response_deserializer=fetcher__service__pb2.ValidationResponse.FromString,
                _registered_method=True)
        self.EnrichData = channel.unary_unary(
                '/fetcher.FetcherService/EnrichData',
                request_serializer=fetcher__service__pb2.EnrichmentRequest.SerializeToString,
                response_deserializer=fetcher__service__pb2.EnrichmentResponse.FromString,
                _registered_method=True)
        self.StreamData = channel.unary_stream(
                '/fetcher.FetcherService/StreamData',
                request_serializer=fetcher__service__pb2.StreamRequest.SerializeToString,
                response_deserializer=fetcher__service__pb2.StreamResponse.FromString,
                _registered_method=True)
        self.ManageWebhook = channel.unary_unary(
                '/fetcher.FetcherService/ManageWebhook',
                request_serializer=fetcher__service__pb2.WebhookRequest.SerializeToString,
                response_deserializer=fetcher__service__pb2.WebhookResponse.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/fetcher.FetcherService/HealthCheck',
                request_serializer=fetcher__service__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=fetcher__service__pb2.HealthCheckResponse.FromString,
                _registered_method=True)


class FetcherServiceServicer(object):
    """Main Fetcher Service
    """

    def FetchExternalData(self, request, context):
        """Data Fetching
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchBulkData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ScheduleFetch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessData(self, request, context):
        """Data Processing
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ValidateData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EnrichData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamData(self, request, context):
        """Real-time Streams
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ManageWebhook(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Health Check
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FetcherServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'FetchExternalData': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchExternalData,
                    request_deserializer=fetcher__service__pb2.FetchRequest.FromString,
                    response_serializer=fetcher__service__pb2.FetchResponse.SerializeToString,
            ),
            'FetchBulkData': grpc.unary_stream_rpc_method_handler(
                    servicer.FetchBulkData,
                    request_deserializer=fetcher__service__pb2.BulkFetchRequest.FromString,
                    response_serializer=fetcher__service__pb2.FetchResponse.SerializeToString,
            ),
            'ScheduleFetch': grpc.unary_unary_rpc_method_handler(
                    servicer.ScheduleFetch,
                    request_deserializer=fetcher__service__pb2.ScheduleFetchRequest.FromString,
                    response_serializer=fetcher__service__pb2.ScheduleFetchResponse.SerializeToString,
            ),
            'ProcessData': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessData,
                    request_deserializer=fetcher__service__pb2.ProcessingRequest.FromString,
                    response_serializer=fetcher__service__pb2.ProcessingResponse.SerializeToString,
            ),
            'ValidateData': grpc.unary_unary_rpc_method_handler(
                    servicer.ValidateData,
                    request_deserializer=fetcher__service__pb2.ValidationRequest.FromString,
                    response_serializer=fetcher__service__pb2.ValidationResponse.SerializeToString,
            ),
            'EnrichData': grpc.unary_unary_rpc_method_handler(
                    servicer.EnrichData,
                    request_deserializer=fetcher__service__pb2.EnrichmentRequest.FromString,
                    response_serializer=fetcher__service__pb2.EnrichmentResponse.SerializeToString,
            ),
            'StreamData': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamData,
                    request_deserializer=fetcher__service__pb2.StreamRequest.FromString,
                    response_serializer=fetcher__service__pb2.StreamResponse.SerializeToString,
            ),
            'ManageWebhook': grpc.unary_unary_rpc_method_handler(
                    servicer.ManageWebhook,
                    request_deserializer=fetcher__service__pb2.WebhookRequest.FromString,
                    response_serializer=fetcher__service__pb2.WebhookResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=fetcher__service__pb2.HealthCheckRequest.FromString,
                    response_serializer=fetcher__service__pb2.HealthCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'fetcher.FetcherService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('fetcher.FetcherService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class FetcherService(object):
    """Main Fetcher Service
    """

    @staticmethod
    def FetchExternalData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fetcher.FetcherService/FetchExternalData',
            fetcher__service__pb2.FetchRequest.SerializeToString,
            fetcher__service__pb2.FetchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FetchBulkData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/fetcher.FetcherService/FetchBulkData',
            fetcher__service__pb2.BulkFetchRequest.SerializeToString,
            fetcher__service__pb2.FetchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ScheduleFetch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fetcher.FetcherService/ScheduleFetch',
            fetcher__service__pb2.ScheduleFetchRequest.SerializeToString,
            fetcher__service__pb2.ScheduleFetchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ProcessData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fetcher.FetcherService/ProcessData',
            fetcher__service__pb2.ProcessingRequest.SerializeToString,
            fetcher__service__pb2.ProcessingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ValidateData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fetcher.FetcherService/ValidateData',
            fetcher__service__pb2.ValidationRequest.SerializeToString,
            fetcher__service__pb2.ValidationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EnrichData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fetcher.FetcherService/EnrichData',
            fetcher__service__pb2.EnrichmentRequest.SerializeToString,
            fetcher__service__pb2.EnrichmentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/fetcher.FetcherService/StreamData',
            fetcher__service__pb2.StreamRequest.SerializeToString,
            fetcher__service__pb2.StreamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ManageWebhook(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fetcher.FetcherService/ManageWebhook',
            fetcher__service__pb2.WebhookRequest.SerializeToString,
            fetcher__service__pb2.WebhookResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fetcher.FetcherService/HealthCheck',
            fetcher__service__pb2.HealthCheckRequest.SerializeToString,
            fetcher__service__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
