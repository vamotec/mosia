# .github/workflows/deploy.yml
name: Complete Deploy with Config

on:
  push:
    branches: [main, develop]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_DB: mosia_test
          POSTGRES_USER: mosia
          POSTGRES_PASSWORD: test123
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
    
      - name: Cache SBT
        uses: actions/cache@v3
        with:
          path: |
            ~/.sbt
            ~/.coursier
          key: ${{ runner.os }}-sbt-${{ hashFiles('**/build.sbt') }}

      - name: Run tests
        working-directory: backend/main_service/moscala
        run: sbt test

      - name: Set environment variables
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "DEPLOY_ENV=production" >> $GITHUB_ENV
            echo "DB_HOST=${{ secrets.PROD_DB_HOST }}" >> $GITHUB_ENV
            echo "REDIS_URL=${{ secrets.PROD_REDIS_URL }}" >> $GITHUB_ENV
          else
            echo "DEPLOY_ENV=staging" >> $GITHUB_ENV  
            echo "DB_HOST=${{ secrets.STAGING_DB_HOST }}" >> $GITHUB_ENV
            echo "REDIS_URL=${{ secrets.STAGING_REDIS_URL }}" >> $GITHUB_ENV
          fi

      - name: Generate application config
        run: |
          # 创建完整的 .env 文件
          cat > .env << EOF
          # Environment
          NODE_ENV=${{ env.DEPLOY_ENV }}
          BUILD_VERSION=${{ github.sha }}
          BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          # Server Configuration  
          SERVER_PORT=3010
          SERVER_HOST=0.0.0.0

          # Database
          DB_HOST=${{ env.DB_HOST }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_NAME=${{ secrets.DB_NAME }}
          DB_PORT=5432

          # Cache
          REDIS_URL=${{ env.REDIS_URL }}

          # Security
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          JWT_EXPIRY=7d
          APP_SECRET_KEY=${{ secrets.APP_SECRET_KEY }}

          # External Services
          SMTP_HOST=${{ secrets.SMTP_HOST }}
          SMTP_PORT=587
          SMTP_USER=${{ secrets.SMTP_USER }}
          SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}

          # Logging
          LOG_LEVEL=${{ env.DEPLOY_ENV == 'production' && 'warn' || 'info' }}
          LOG_FORMAT=json
          EOF

          echo "✅ Configuration file generated"
          echo "📄 Config preview (secrets masked):"
          grep -v -E "(PASSWORD|SECRET|KEY)" .env || true

      - name: Build application
        run: |
          # 使用 docker-compose 构建镜像
          docker-compose build mosia-api
          
          # 标记版本
          docker tag mosia/backend-api:latest myapp:${{ github.sha }}

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -p ${{ secrets.DEPLOY_PORT || '22' }} ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to server
        run: |
          # 复制配置和应用到服务器
          scp -i ~/.ssh/deploy_key -P ${{ secrets.DEPLOY_PORT || '22' }} \
              .env \
              ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:${{ secrets.DEPLOY_PATH }}/ || {
                echo "❌ 配置文件传输失败"
                exit 1
              }
              
          # 传输 docker-compose.yml 和配置文件
          scp -i ~/.ssh/deploy_key -P ${{ secrets.DEPLOY_PORT || '22' }} \
              docker-compose.yml \
              ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:${{ secrets.DEPLOY_PATH }}/ || {
                echo "❌ docker-compose 文件传输失败"
                exit 1
              }
              
          # 保存镜像并传输到服务器
          docker save myapp:${{ github.sha }} | gzip | \
          ssh -i ~/.ssh/deploy_key -P ${{ secrets.DEPLOY_PORT || '22' }} \
              ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} \
              "cd ${{ secrets.DEPLOY_PATH }} && gunzip | docker load" || {
                echo "❌ 镜像传输失败"
                exit 1
              }
              
          # 在服务器上部署
          ssh -i ~/.ssh/deploy_key -P ${{ secrets.DEPLOY_PORT || '22' }} \
              ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF' || {
                echo "❌ 部署执行失败"
                exit 1
              }
            cd ${{ secrets.DEPLOY_PATH }}
            
            # 备份当前配置
            cp .env .env.backup-\$(date +%Y%m%d-%H%M%S) 2>/dev/null || true
            
            # 更新 docker-compose 中的镜像版本
            sed -i 's/image: mosia\/backend-api:.*/image: myapp:${{ github.sha }}/' docker-compose.yml
            
            # 重新部署使用 docker-compose
            docker-compose down
            docker-compose up -d
            
            # 健康检查和部署验证
            echo "⏳ 等待服务启动..."
            sleep 15
            
            # 多次尝试健康检查
            for i in {1..5}; do
              if curl -f -s http://localhost:3010/health; then
                echo "✅ 第 $i 次健康检查成功"
                break
              else
                echo "⚠️ 第 $i 次健康检查失败，等待5秒后重试..."
                if [ $i -eq 5 ]; then
                  echo "❌ 健康检查最终失败！"
                  echo "📋 容器状态:"
                  docker-compose ps
                  echo "📋 应用日志:"
                  docker-compose logs --tail=50 mosia-api
                  echo "📋 所有服务状态:"
                  docker-compose logs --tail=20
                  echo "📋 系统资源:"
                  df -h && free -h
                  
                  # 自动回滚
                  echo "🔄 尝试回滚到备份配置..."
                  cp .env.backup-* .env 2>/dev/null || true
                  docker-compose restart mosia-api
                  sleep 10
                  
                  if curl -f -s http://localhost:3010/health; then
                    echo "✅ 回滚成功"
                  else
                    echo "❌ 回滚也失败，需要手动干预"
                  fi
                  exit 1
                fi
                sleep 5
              fi
            done
            
            echo "🎉 部署完成且服务健康！"
          EOF
