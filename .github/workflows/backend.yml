name: Backend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/main_service/moscala/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/main_service/moscala/**'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_DB: mosia_test
          POSTGRES_USER: mosia
          POSTGRES_PASSWORD: test123
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'
    
    - name: Cache SBT
      uses: actions/cache@v3
      with:
        path: |
          ~/.sbt
          ~/.coursier
        key: ${{ runner.os }}-sbt-${{ hashFiles('**/build.sbt') }}
    
    - name: Run tests
      working-directory: backend/main_service/moscala
      run: sbt test
    
    - name: Build JAR
      working-directory: backend/main_service/moscala
      run: sbt assembly
    
    - name: Upload JAR artifact
      uses: actions/upload-artifact@v3
      with:
        name: moscala-jar
        path: backend/main_service/moscala/target/moscala.jar

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download JAR artifact
      uses: actions/download-artifact@v3
      with:
        name: moscala-jar
        path: ./
    
    - name: Deploy to server
      env:
        DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
        DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        DEPLOY_KEY: ${{ secrets.DEPLOY_SSH_KEY }}
      run: |
        # 设置 SSH 密钥
        mkdir -p ~/.ssh
        echo "$DEPLOY_KEY" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        
        # 上传 JAR 文件
        scp -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no \
          moscala.jar $DEPLOY_USER@$DEPLOY_HOST:/opt/mosia/moscala/
        
        # 部署到服务器
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no \
          $DEPLOY_USER@$DEPLOY_HOST << 'EOF'
          cd /opt/mosia/moscala
          
          # 停止现有服务
          if pgrep -f "moscala.jar" > /dev/null; then
            echo "停止现有服务..."
            pkill -f "moscala.jar" || true
            sleep 5
          fi
          
          # 备份当前版本
          if [ -f "moscala.jar.current" ]; then
            mv moscala.jar.current moscala.jar.backup
          fi
          
          # 部署新版本
          mv moscala.jar moscala.jar.current
          
          # 启动服务
          echo "启动新版本..."
          nohup java -jar moscala.jar.current > logs/moscala.log 2>&1 &
          
          # 验证启动
          sleep 10
          if pgrep -f "moscala.jar" > /dev/null; then
            echo "✅ 部署成功"
          else
            echo "❌ 部署失败"
            exit 1
          fi
        EOF